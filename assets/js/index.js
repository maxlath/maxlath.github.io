// Generated by CoffeeScript 1.10.0
(function() {
  var NotThisTab, elements, elementsList, expandTabBar, getElementData, margin, placeHolderEl, reduceTabBar, select, selectTab, tabsList, unselect, unselectAll, updateTabsPosition,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  placeHolderEl = document.querySelector('#expanded-tabs-placeholder');

  tabsList = ['projects', 'articles', 'posts', 'links'];

  elementsList = ['tabs'].concat(tabsList);

  elements = {};

  getElementData = function(elName) {
    var el;
    el = document.querySelector("#" + elName);
    el.top = el.offsetTop;
    el.bottom = el.offsetTop + el.offsetHeight;
    if (indexOf.call(tabsList, elName) >= 0) {
      el.tab = document.querySelector("a[href='#" + elName + "']");
    }
    return el;
  };

  elementsList.forEach(function(elName) {
    return elements[elName] = getElementData(elName);
  });

  margin = 25;

  updateTabsPosition = function(e) {
    var articles, links, pageY, posts, projects;
    pageY = e.pageY;
    projects = elements.projects, articles = elements.articles, posts = elements.posts, links = elements.links;
    if (pageY > elements.tabs.bottom) {
      expandTabBar();
    } else if (pageY < elements.tabs.top) {
      reduceTabBar();
    }
    if (pageY < projects.top - margin) {
      return unselectAll();
    } else if (pageY < articles.top - margin) {
      return selectTab('projects');
    } else if (pageY < posts.top - margin) {
      return selectTab('articles');
    } else if (pageY < links.top - margin) {
      return selectTab('posts');
    } else {
      return selectTab('links');
    }
  };

  expandTabBar = function() {
    placeHolderEl.style.display = 'block';
    return elements.tabs.classList.add('expanded');
  };

  reduceTabBar = function() {
    placeHolderEl.style.display = 'none';
    return elements.tabs.classList.remove('expanded');
  };

  selectTab = function(tabName) {
    tabsList.filter(NotThisTab(tabName)).forEach(unselect);
    return select(tabName);
  };

  select = function(tabName) {
    if (tabName != null) {
      return elements[tabName].tab.classList.add('selected');
    }
  };

  unselect = function(tabName) {
    return elements[tabName].tab.classList.remove('selected');
  };

  NotThisTab = function(excludedTabName) {
    return function(tabName) {
      return tabName !== excludedTabName;
    };
  };

  unselectAll = selectTab.bind(null, null);

  window.addEventListener('scroll', updateTabsPosition);

}).call(this);
